rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to validate Firebase UID format
    function isValidUid(uid) {
      return uid is string && uid.size() == 28 && uid.matches('[a-zA-Z0-9]{28}');
    }
    
    // Helper: read a user's role (defensive)
    function userRole() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid))
             ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
             : null;
    }

    // Helper: mission owner check (defensive)
    function isMissionOwner(missionId) {
      return exists(/databases/$(database)/documents/missions/$(missionId)) &&
             get(/databases/$(database)/documents/missions/$(missionId)).data.created_by == request.auth.uid;
    }

    // Helper: admin or moderator check
    function isAdminOrMod() {
      let r = userRole();
      return r == 'admin' || r == 'moderator';
    }
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId && 
        isValidUid(userId);
      allow read: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow create: if request.auth != null && 
        request.auth.uid == userId && 
        isValidUid(userId) &&
        request.resource.data.uid == userId;
    }
    
    // Missions are readable by authenticated users, writable by admins
    match /missions/{missionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow create: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator' || 
         (request.auth.uid == request.resource.data.created_by && 
          isValidUid(request.resource.data.created_by)));
    }
    
    // Mission participations - users can join missions and update their own records
    match /mission_participations/{participationId} {
      // Writers: the signed-in submitter can create/update their own doc
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.user_id &&
        request.resource.data.mission_id is string &&
        request.resource.data.user_id is string &&
        request.resource.data.status in ['active', 'completed', 'cancelled'];

      allow update: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      
      // Readers:
      // - submitter can read their own
      // - mission owner can read all submissions for their mission
      // - admins/moderators can read any
      allow get, list: if request.auth != null && (
          resource.data.user_id == request.auth.uid ||
          isMissionOwner(resource.data.mission_id) ||
          isAdminOrMod()
      );
      
      // Delete: deny for security
      allow delete: if false;
    }
    
    // Submissions are readable by the user who created them and admins
    match /submissions/{submissionId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Reviews - readable by admins and moderators
    match /reviews/{reviewId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Transactions - users can read their own transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Wallets - users can read their own wallet
    match /wallets/{walletId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Rewards - users can read their own rewards
    match /rewards/{rewardId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Admin collections are only accessible by admins
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // System settings - only admins
    match /system/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Analytics - only admins and moderators
    match /analytics/{document=**} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Task completions - users can read/write their own completions, admins can read all
    match /taskCompletions/{completionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.userId || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator') &&
        // Ensure required fields are present
        request.resource.data.keys().hasAll(['missionId', 'userId', 'taskId', 'status', 'createdAt', 'updatedAt']) &&
        // Ensure user can only create completions for themselves
        request.resource.data.userId == request.auth.uid;
    }
    
    // User activity logs - users can create their own logs
    match /user_activity_logs/{logId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.user_id;
      allow update, delete: if false;
    }
    
    // User mission completion summaries - for fast Discover page lookups
    match /users/{userId}/missions/{missionId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // User stats (private to user, write-only via Cloud Functions)
    match /stats {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // only server writes
    }
    
    // Mission progress tracking (private to user, write-only via Cloud Functions)
    match /missionProgress/{missionId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // only server writes
      
      // Task markers and wins (private to user, write-only via Cloud Functions)
      match /{document=**} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false; // only server writes
      }
    }
  }

  // Mission progress summaries (denormalized for efficient queries)
  match /mission_progress/{progressId} {
    allow read: if request.auth != null && (
      resource.data.userId == request.auth.uid ||
      isMissionOwner(resource.data.missionId) ||
      isAdminOrMod()
    );
    allow write: if false; // Only written by Cloud Functions
  }

  // User activity logging
  match /user_activity/{docId} {
    allow create: if request.auth != null
                  && request.resource.data.user_id == request.auth.uid
                  && request.resource.data.timestamp is timestamp;
    allow read: if request.auth != null && request.auth.uid == resource.data.user_id;
    allow update, delete: if false;
  }

  // Missions with public aggregates
  match /missions/{missionId} {
    allow read: if request.auth != null;
    allow write: if request.auth != null && 
        (request.auth.uid == resource.data.created_by || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    
    // Public aggregates (world-readable, write-only via Cloud Functions)
    match /aggregates/{aggId} {
      allow read: if true; // public counters only
      allow write: if false; // only via Cloud Functions using Admin SDK
    }
    
    // Private completions (user-specific)
    match /completions/{completionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
