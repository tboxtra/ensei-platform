rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Missions are readable by authenticated users, writable by admins
    match /missions/{missionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow create: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator' || 
         request.auth.uid == resource.data.created_by);
    }
    
    // Mission participations - users can join missions
    match /mission_participations/{participationId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Submissions are readable by the user who created them and admins
    match /submissions/{submissionId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Reviews - readable by admins and moderators
    match /reviews/{reviewId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Transactions - users can read their own transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Wallets - users can read their own wallet
    match /wallets/{walletId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Rewards - users can read their own rewards
    match /rewards/{rewardId} {
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Admin collections are only accessible by admins
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // System settings - only admins
    match /system/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
    
    // Analytics - only admins and moderators
    match /analytics/{document=**} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }
  }
}
